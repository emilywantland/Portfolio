Visual Studio will create the Form1 class for you, as usual. We're going to create another class file, as well, that will be used to represent a date. Add a second class file to your project. In Visual Studio, select the Project menu and then select Add Class. The Add New Item dialog box will be displayed. There are many templates we can use to build a new class from but we'll keep it simple for the moment. We just want to add an empty class file. On the left of the dialog box, choose Code as type of item. On the right of the dialog box, choose Class as the template. At the bottom of the dialog box, name the class file Date.cs and click the Add button. Be sure to include the .cs extension! Visual Studio will create an empty class named Date for you work with.
Note how Visual Studio's Solution Explorer now shows two files in your project. You can edit either file by double-clicking on its name in the Solution Explorer. Let's start by renaming the Form1 class. Right-click on the Form1.cs entry in the Solution Explorer and choose Rename. Give the form a new name, DateForm.cs . Be sure to include the .cs extension! Press Enter and then agree to allow Visual Studio to rename this in all references to it in your project.
Next, let's create the Date class. First, we need to make the class public so that it may be used by anyone.
The class Date will include three pieces of information: a month (type int), a day (type int) and a year (type int). Create these as private instance variables (backing fields). If you wish to avoid confusion with the properties being defined later, choose distinct names for these instance variables, such as _month or _day.
Provide properties in the Date class that may be used to get and set the values of three int backing fields. Name the properties Month, Day, and Year. When the user sets a month value, make sure it is between 1-12; otherwise, make the month be 1. For simplicity, when the user sets day value, make sure it is between 1-31; otherwise, make the day 1. When the user sets a year value, make sure it is non-negative (>= 0); otherwise, make the year 2019.
The Date class should have a constructor that accepts values for the month, day, and year (using parameters, much like the text did with the Employee class on p. 381). Use these values to initialize the associated instance variables by using the Month, Day, and Year properties' set accessors. Be careful to name your parameters so that you don't confuse them with either the backing fields or similar properties.
Write a ToString() method for the Date class that returns a simple string in the form of MM/DD/YYYY . Format the month and day fields in the string to produce two digits. For example, January 1, 2001 would appear as: "01/01/2001" . Remember, you must also use keyword override when defining a ToString method. Review the Time class example from class (under Daily Notes) for an example of a ToString method. Remember, to get leading zeros on integers use a format specifier such as D2 or D4.
Next, we'll write a simple test program in the form that demonstrates that the Date class works.

Your form will need a Date object field. Add a Date instance variable to your form and construct the object using the date 1/1/2000. It's OK to hard code this data without using named constants.
Next, add a Load event to your form. The event handler should update the date text on the form by setting the label's Text using your Date object's ToString method.
Add event handlers for each of the update buttons on the form. Each should try to parse the specified date component's textbox (month, day, or year) and if successful, use that integer to set the form's Date field's corresponding property (Month, Day, or Year). Then, update the form's date text to reflect the change and clear the entered text from the textbox. If the parse is not successful, display an appropriate error message. These event handlers will allow us to test the functioning of the Date properties. When a valid month, day, or year is entered, the form's displayed date should change. When invalid (but integer) data is entered, the form's displayed date should change to the default value, demonstrating that validation in Date properties' set accessors works.